#The overall final score is multiplied by this value. The factor can also be a
#float, such as e.g. 0.334. The final score is rounded down to an integer.
scoreFactor=1
#Number of different types of test cases.
immediatePublicTests=3
immediatePrivateTests=1
finalPublicTests=0
finalPrivateTests=0
#Minimum required score for each test type.
minImmediatePublicScore=3
minImmediatePrivateScore=1
minFinalPublicScore=0
minFinalPrivateScore=0
#Programming language (currently C, C++ or Java)
programmingLanguage=C++
#Compile tested program with a Makefile?
#If yes, package has to have one!
useMakefile=false
#Command to run in each test (may
#include command line parameters).
testCmd=prog
#File with commands for each test:
#one line per test case.
testCmdFile=""
#Name of the evaluator script/program
#(should be in the package).
evaluator=diff
#The name, if exists, for a makefile that prepares
#the evaluator/task (run only once after the package is unzipped)?
evaluateMakefile=""
#The name, if exists, of a file to
#feed to the tested progam via stdin.
stdinFile=""
#Capture stdout of the tested program
#to a file? If yes, give filename.
stdoutFile=input_out.txt
#The general name of the task. Also
#implies names for the test case files.
taskFileBase=input
#Limits for allowed time/memory for the test.
timeLimit=1
memoryLimit=64
#Extra arguments for sandbox
#(does not affect Java).
extraBoxArgs=""
#Use a binary 0/1 scoring scheme where full points
#in a test phase gives 1 point, otherwise 0 points?
binaryPhaseScore=true
#Use a scoring scheme where only
#private test points affect the score.
onlyPrivateScore=true
#Perform immediate private tests immediately after immediate public
#tests, without intermediate queuing of the job.
chainImmediateTests=true
#Create a grade automatically for an accepted submission
autoCreateGrade=false